// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    return $.fn.ajaxChosen = function(settings, callback, chosenOptions) {
      var chosenXhr, defaultOptions, options, select;
      if (settings == null) {
        settings = {};
      }
      if (chosenOptions == null) {
        chosenOptions = {};
      }
      defaultOptions = {
        minTermLength: 3,
        afterTypeDelay: 500,
        jsonTermKey: "term",
        keepTypingMsg: "Keep typing...",
        lookingForMsg: "Looking for"
      };
      select = this;
      chosenXhr = null;
      options = $.extend({}, defaultOptions, $(select).data(), settings);
      this.chosen(chosenOptions ? chosenOptions : {});
      return this.each(function() {
        return $(this).next('.chosen-container').find(".search-field > input, .chosen-search > input").bind('keyup', function() {
          var field, msg, success, untrimmed_val, val;
          untrimmed_val = $(this).val();
          val = $.trim($(this).val());
          if (val === $(this).data('prevVal')) {
            return false;
          }
          $(this).data('prevVal', val);
          if (this.timer) {
            clearTimeout(this.timer);
          }
          if ((val.length < options.minTermLength || val.length > options.minTermLength) && /*!select.next('.chosen-container').find('.no-results').is(':visible') &&*/ select.next('.chosen-container').find('li.active-result').length != 0) {
            return false;
          }
          msg = val.length < options.minTermLength ? options.keepTypingMsg : options.lookingForMsg + (" '" + val + "'");
          select.next('.chosen-container').find('.no-results').text(msg);
          field = $(this);
          if (options.data == null) {
            options.data = {};
          }
          options.data[options.jsonTermKey] = val;
          options.data["cf"] = $(this).parent().parent().parent().attr('id');
          var dependentOnField = $(this).closest("td").find("select").data("dependent");
          if (dependentOnField != undefined) {
              var parentValue;
              if ($("#inline-edit-form #cf_" + dependentOnField)[0] != undefined) {
                    parentValue = $("#inline-edit-form #cf_" + dependentOnField).val();
                } else {
                    parentValue = 'not-on-form';
              }
              options.data["parentValue"] = parentValue;
            }

          if (gemini_edit.issueId && gemini_edit.issueId > 0)
          {
              options.data["issueid"] = gemini_edit.issueId;
          }

          if(options.url.indexOf('{projectid}' != -1)) {
              options.url = options.url.replace('{projectid}', $(this).parent().parent().parent().prev().attr('data-project-id'));
          }
          
          if (options.dataCallback != null) {
            options.data = options.dataCallback(options.data);
          }
          success = options.success;
          options.success = function(data) {
            var items, nbItems, selected_values;
            if (data == null) {
              return;
            }
            selected_values = [];
            selected_data = [];
            update = false;
            select.find('option').each(function() {
                if (!$(this).is(":selected")) {
                    update = true;
                    return $(this).remove();
              } else {
                  if ($(this).val() != '-|1') selected_data.push($(this));
                return selected_values.push($(this).val() + "-" + $(this).text());
              }
            });
            select.find('optgroup:empty').each(function() {
              return $(this).remove();
            });
            items = callback != null ? callback(data, field) : data;
            nbItems = 0;
            $.each(items, function(i, element) {
              var group, text, value;
              nbItems++;
              if (element.group) {
                group = select.find("optgroup[label='" + element.text + "']");
                if (!group.size()) {
                  group = $("<optgroup />");
                }
                group.attr('label', element.text).appendTo(select);
                return $.each(element.items, function(i, element) {
                  var text, value;
                  if (typeof element === "string") {
                    value = i;
                    text = element;
                  } else {
                    value = element.value;
                    text = element.text;
                  }
                  if ($.inArray(value + "-" + text, selected_values) === -1) {
                    return $("<option />").attr('value', value).html(text).appendTo(group);
                  }
                });
              } else {
                if (typeof element === "string") {
                  value = i;
                  text = element;
                } else {
                  value = element.value;
                  text = element.text;
                }
                if ($.inArray(value + "-" + text, selected_values) === -1) {
                  return $("<option />").attr('value', value).html(text).appendTo(select);
                }
              }
            });
              
            $(selected_data).each(function () {
                if($(this)[0].value != 0 )  {
                    $(this).remove();
                    $(this).appendTo(select);
                }
            });
              
            if (nbItems || update) {
                gemini_ui.chosenUpdate(select);
                select.data().chosen.search_field.val(untrimmed_val);
                select.data().chosen.search_field_scale();
            } else {
              select.data().chosen.no_results_clear();
              select.data().chosen.no_results(field.val());
            }
            if (settings.success != null) {
              settings.success(data);
            }
            return field.val(untrimmed_val);
          };
          return this.timer = setTimeout(function() {
            if (chosenXhr) {
              chosenXhr.abort();
            }
            return chosenXhr = $.ajax(options);
          }, options.afterTypeDelay);
        });
      });
    };
  })(jQuery);

}).call(this);
