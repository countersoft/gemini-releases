@model RoadmapModel

@if (Model.Issues.Count > 0)
{
    Html.RenderPartial("~/Views/Progress/StatusBar.cshtml");

<table class='width-100'>
    <tr>
        <td class='valign-top noprint'>
            @{Html.RenderPartial("~/Views/Progress/VersionProgress.cshtml", Model);}
        </td>
        <td class='valign-top width-100'>
            <div>
                <div id="page-options-box" class="right burndown">
                    <div class="box-right size-1">
                        <div>
                            @using (Html.BeginForm("burndown", "progress", FormMethod.Post, new { @id = "burndown-form" }))
                            {
                        
                            <div class="option">

                            <div class="option vertical-align margin-right-10">                   
                                <div id="status-picker-control" class="control-icon gear auto-popup-keep" title="@GetResource(ResourceKeys.Status)"> </div>                           
                            </div>
                              
                            <select id="days" name="days" class="input-size3">
                            <option value="1" @if (Model.Days == 1)
                                              {<text>selected="selected"</text>}>1 @GetResource(ResourceKeys.Day)</option>
                            <option value="5" @if (Model.Days == 5)
                                              {<text>selected="selected"</text>}>5 @GetResource(ResourceKeys.Days)</option>
                            <option value="7" @if (Model.Days == 7)
                                              {<text>selected="selected"</text>}>7 @GetResource(ResourceKeys.Days)</option>
                            <option value="30" @if (Model.Days == 30)
                                               {<text>selected="selected"</text>}>30 @GetResource(ResourceKeys.Days)</option>
                            </select>
                            </div>

                            <div class="divider"></div>

                            <div class="option radio-check">
                           
                            <input class="fancy" type="radio" id="itemhouri" name="itemhour" value="Issues" title="items" @if (Model.ItemHours == CountTypes.Issues) {<text>checked="checked"</text>}/>    
                            <label for="itemhouri">@GetResource(ResourceKeys.Items)</label>

                            <input class="fancy" type="radio" id="itemhourh" name="itemhour" value="Time" title="hours" @if (Model.ItemHours == CountTypes.Time) {<text>checked="checked"</text>}/>
                            <label for="itemhourh">@GetResource(ResourceKeys.Hours)</label>
                  
                            <input class="fancy" type="radio" id="itempoints" name="itemhour" value="Points" title="points" @if (Model.ItemHours == CountTypes.Points) {<text>checked="checked"</text>}/>
                            <label for="itempoints">@GetResource(ResourceKeys.Points)</label>

                            </div>
                            <div id="status-picker-container" data-hide-func="($('#status-picker-container').addClass('hide'))" class="auto-popup hide">
                                <label>Treat as completed</label>
                                @Html.ListBox("TreatStatusesAsClosed", Model.StatusAsClosed, new { @class = "input-size5" })
                                <input type="button" value="Apply" class="button-primary valign-top" id="add-open-statuses" />    
                            </div>   
                            @*<div class="divider"></div>
                            <div class="option radio-check">
                            <input id="stones" type="checkbox" name="stones" />
                            <label for="stones" title="bar size" style="">@GetResource(ResourceKeys.Milestones)</label>
                            </div>*@
                            }
                        </div>   
                    </div>     
                </div>
            </div>
            <table class="border-all pad-10 width-100">
                <tr>
                    <td>
                        <div class="clearfix">
                            <div class="left pad-bottom-20 margin-right-20">
                                <h2 class="pad-bottom-10">@GetResource(ResourceKeys.Burndown)</h2>
                                <div id='burndown' style="width:700px; height: 400px;"></div>
                            </div>
                            <div class="left pad-bottom-20">
                                <h2 class="pad-bottom-10">@GetResource(ResourceKeys.Burnup)</h2>
                                <div id='burnup' style="width:700px; height: 400px;"></div>
                            </div>

                            <div style="width:700px;" class='left pad-bottom-20 margin-right-20'>
                                @if (Model.ResourceBreakdown != null && Model.ResourceBreakdown.Count > 0)
                                {
                                    <h2 class="pad-bottom-10">@GetResource(ResourceKeys.Summary)</h2>
                                    <table style="width:670px;" class="default-style margin-left-20">
                                        <tr>
                                            <th>@GetResource(ResourceKeys.Resources)</th>
                                            <th style="text-align:center;">@GetResource(ResourceKeys.ItemsRemaining)</th>
                                            <th style="text-align:center;">@GetResource(ResourceKeys.TimeRemaining) @(Model.ItemHours == CountTypes.Points ? @GetResource(ResourceKeys.Points) : @GetResource(ResourceKeys.Hours)) </th>
                                        </tr>
                                        @foreach (VersionWorkBreakdown item in Model.ResourceBreakdown)
                                        {
                                            <tr @if (item.UserId == 0)
                                                {<text>class="issue-highlight"</text>}>
                                                <td>@item.User.Fullname</td>
                                                <td class="center">@item.OpenIssues</td>
                                                <td class="center">@(Model.ItemHours == CountTypes.Points ? item.PointsLeft.ToString() : item.TimeLeft)</td>
                                            </tr>
                                        }
                                    </table>
                                }
                            </div>  

                            <div class="left pad-bottom-20">
                                <h2 class="pad-bottom-10">Velocity</h2>
                                <div id='velocity' style="width:700px; height: 400px;"></div>
                            </div>
                        </div>                    
                    </td>
                </tr>
                <tr>
                    <td>
                                  
                    </td>
                </tr>

            </table>

        </td>
    </tr>
</table>
<script type="text/javascript">
    $(document).ready(function () {
        gemini_ui.chosen($('#TreatStatusesAsClosed', '#status-picker-container'));

        $('#progress-container #status-picker-control').unbind().bind('click',function (e) {
            if ($('#status-picker-container').is(':visible'))
            {
                $('#status-picker-container').addClass('hide');
            }
            else
            {
                $('#status-picker-container').removeClass('hide');
                var position = $("#status-picker-control").position();             
           
                $("#status-picker-container").position({
                    "my": "right top",
                    "at": "right bottom",
                    "of": $("#status-picker-control"),
                    "offset": "0 5",
                    "collision": "none"
                });
                $('input[type="text"]:first','#status-picker-container').focus();
            }
        });

        $('#progress-container #add-open-statuses').unbind().bind('click',function () {
            gemini_ui.startBusy('#add-open-statuses');
            gemini_progress.executeFilter("($('#progress-indicator').addClass('hide'))");
        });

        //gemini_progress.init("@Model.VersionId","@Model.VersionLabel",csVars.Url + csVars.ProjectUrl);
        var totalClosed = @Model.Closed;
        var totalOpen = @Model.Open;
        var total = @Model.Total;
        //var completeness = total > 0 ? Math.floor((totalClosed * 100)/total) : 0;

        var versionid = '@Model.VersionId';
        var burndownCategory = @Html.Raw(Model.Burndown.Select(b => b.Category).ToJson());
        var burndownOpenData = @Html.Raw(Model.Burndown.Select(b => b.OpenCount).ToJson());
        var burndownCreatedData = @Html.Raw(Model.Burndown.Select(b => b.CreatedCount).ToJson());
        var burndownIdealLine = @Html.Raw(Model.IdealLine.ToJson());
        var burndownTrendLine = @Html.Raw(Model.BurndownTrendline.ToJson());
        var burnupTrendLine = @Html.Raw(Model.BurnupTrendline.ToJson());

        var burnupCategory = @Html.Raw(Model.Burnup.Select(b => b.Category).ToJson());
        var burnupTotalData = @Html.Raw(Model.Burnup.Select(b => b.TotalCount).ToJson());        
        var burnupClosedData = @(Model.Burnup.Any(a => a.CountType == CountTypes.Issues || a.CountType == CountTypes.Points) ? Html.Raw(Model.Burnup.Select(b => b.ClosedCount).ToJson()) : Html.Raw(Model.Burnup.Select(b => (b.StartInterval <= System.DateTime.Today ? b.TotalLoggedHours : null)).ToJson()));
       
        var velocityCategory = @Html.Raw(Model.Velocity.Select(b => b.Category).ToJson());
        var velocityTotalData = @Html.Raw(Model.Velocity.Select(b => b.TotalCount).ToJson());
        var velocityLine = @Html.Raw(Model.VelocityLine.ToJson()); 
        
        var milestoneData = @Html.Raw(Model.Milestones.ToJson());

        var translation = {Items: '@((Model.ItemHours == CountTypes.Issues || Model.ItemHours == CountTypes.Points) ? (Model.ItemHours == CountTypes.Points ? GetResource(ResourceKeys.Points) : GetResource(ResourceKeys.Items)) : GetResource(ResourceKeys.Hours))', Total: '@GetResource(ResourceKeys.Total)', Created: '@GetResource(ResourceKeys.Created)', Open: '@GetResource(ResourceKeys.Open)', Closed: '@GetResource(ResourceKeys.Closed)' };
   
        gemini_progress.burndownChart(translation,burndownCategory,burndownOpenData,burndownCreatedData,burndownIdealLine,burndownTrendLine);
        gemini_progress.burnupChart(translation,burnupCategory,burnupTotalData,burnupClosedData, burnupTrendLine);
        //gemini_progress.showCompleteness(completeness);
        gemini_progress.showDelta(@Model.Remain);
        gemini_progress.showDays(@Model.Estimated,@Model.Logged, @Model.TimeLoggedOver);
    
        if (velocityCategory.length > 0) { gemini_progress.velocityChart(translation, velocityCategory, velocityTotalData, velocityLine); }

        //gemini_progress.chart(@Html.Raw(Model.Statuses.Select(s => s.First).ToJson()),@Model.Issues.Count,@Html.Raw(Model.Statuses.Select(s => new { s.Second, s.Third }).ToJson()));
    });
</script>

}
else
{
    <input class="hide" type="radio" id="itemhouri" name="itemhour" value="Issues" title="items" @if (Model.ItemHours == CountTypes.Issues)  {<text>checked="checked"</text>}/>                           
    <input class="hide" type="radio" id="itemhourh" name="itemhour" value="Time" title="hours" @if (Model.ItemHours == CountTypes.Time) {<text>checked="checked"</text>}/>
    <input class="hide" type="radio" id="itempoints" name="itemhour" value="Points" title="points" @if (Model.ItemHours == CountTypes.Points)  {<text>checked="checked"</text>}/>
    
    <div id="cs-template">
        <div id="no-data"> No data </div>
    </div>
}